service:
  name: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
frameworkVersion: '2'

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

custom:
  dotenv:
    required:
      file: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1

  environment:
    PG_HOST: aws-node-db-instance.csgvm17alrq7.eu-west-1.rds.amazonaws.com
    PG_PORT: 5432
    PG_DATABASE: ${env:PG_DATABASE}
    PG_USERNAME: postgres
    PG_PASSWORD: ${env:PG_PASSWORD}
    SQS_URL:
      Ref: SQSQueue
    SNS_ARN:
      Ref: SNSTopic

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:*"
      Resource:
        - Fn::GetAtt: [ SQSQueue, Arn ]
    - Effect: "Allow"
      Action:
        - "sns:*"
      Resource:
        - Ref: SNSTopic

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "catalogItemsQueue"
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "createProductTopic"
    SNSPackedSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_PACKED_EMAIL}
        Protocol: email
        FilterPolicy:
          warehouse:
            - packed
        TopicArn:
          Ref: SNSTopic
    SNSUnpackedSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_UNPACKED_EMAIL}
        Protocol: email
        FilterPolicy:
          warehouse:
            - unpacked
        TopicArn:
          Ref: SNSTopic
  Outputs:
    SQSQueueUrl:
      Value:
        Ref: SQSQueue
    SQSQueueArn:
      Value:
        Fn::GetAtt: [ SQSQueue, Arn ]

functions:
  invokeDb:
    handler: handlers.invokeDb
  getProductsList:
    handler: handlers.getProductsList
    events:
      - http:
          method: get
          path: books
          cors: true
  getProductById:
    handler: handlers.getProductById
    events:
      - http:
          method: get
          path: book/{bookId}
          cors: true
  postProduct:
    handler: handlers.postProduct
    events:
      - http:
          method: post
          path: book
          cors: true
  catalogBatchProcess:
    handler: handlers.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
